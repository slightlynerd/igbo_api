{"version":3,"sources":["webpack:///./src/assets/icons/downchevron.svg","webpack:///./src/utils/parseQueries.js","webpack:///./src/API.js","webpack:///./src/forms/AddExample.js","webpack:///./src/hooks/useEventListener.js","webpack:///./src/components/Select.js","webpack:///./src/pages/word.js","webpack:///./src/components/NoWord.js"],"names":["React","Downchevron","props","createElement","defaultProps","module","exports","default","parseQueries","queries","split","filter","query","reduce","queryMap","keyValuePair","lastSearch","page","axios","get","WORDS_API_URL","AddExample","onRequestClose","onSuccess","onFailure","defaultValues","useForm","handleSubmit","getValues","reset","control","errors","onSubmit","data","cleanedData","definitions","definition","variations","variation","originalWordId","id","post","EXAMPLE_SUGGESTIONS_API_URL","then","subtitle","catch","className","word","as","placeholder","data-test","name","defaultValue","igbo","english","type","onClick","useEventListener","eventName","handler","element","window","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","Select","ContainerComponent","options","useState","isMenuVisible","setIsMenuVisible","selectRef","e","contains","target","document","getElementsByTagName","ref","label","onSelect","location","search","response","setResponse","renderNoWord","setRenderNoWord","visible","setVisible","formType","setDefaultValues","a","getWord","words","length","showAddWordModal","value","wordClass","index","examples","title","isOpen","NoWord"],"mappings":"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","file":"component---src-pages-word-js-0cd8b2893a5dc51edfab.js","sourcesContent":["var React = require('react');\n\nfunction Downchevron (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"d\":\"M4.5 6.5l3 3 3-3\",\"stroke\":\"#2d3748\",\"strokeLinecap\":\"square\"}));\n}\n\nDownchevron.defaultProps = {\"viewBox\":\"0 0 15 15\",\"fill\":\"none\",\"width\":\"15\",\"height\":\"15\"};\n\nmodule.exports = Downchevron;\n\nDownchevron.default = Downchevron;\n","/* Takes the query string and transform it into an object */\nconst parseQueries = (queries) => {\n  const queriesMap = queries\n    .split(/(\\?|&)/)\n    .filter((query) => query !== '' && query !== '?' && query !== '&')\n    .reduce((queryMap, query) => {\n      const keyValuePair = query.split('=');\n      return { ...queryMap, [keyValuePair[0]]: keyValuePair[1] };\n    }, {});\n  return queriesMap;\n};\n\nexport default parseQueries;\n","import axios from 'axios';\nimport { WORDS_API_URL } from './config';\n\nexport default (lastSearch, page = 0) => axios.get(`${WORDS_API_URL}?keyword=${lastSearch}&page=${page}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { map, compact, trim } from 'lodash';\nimport { useForm, Controller } from 'react-hook-form';\nimport { EXAMPLE_SUGGESTIONS_API_URL } from '../config';\n\nconst AddExample = ({\n  onRequestClose,\n  onSuccess,\n  onFailure,\n  defaultValues,\n}) => {\n  const {\n    handleSubmit,\n    getValues,\n    reset,\n    control,\n    errors,\n  } = useForm();\n\n  const onSubmit = (data) => {\n    const cleanedData = {\n      ...data,\n      definitions: compact(map(data.definitions, (definition) => trim(definition))),\n      variations: compact(map(data.variations, (variation) => trim(variation))),\n      originalWordId: defaultValues?.id || null,\n    };\n    axios\n      .post(EXAMPLE_SUGGESTIONS_API_URL, cleanedData)\n      .then(() => {\n        reset();\n        onSuccess({ subtitle: 'You\\'re example has been sent for review by editors.' });\n      })\n      .catch(() => {\n        onFailure({ subtitle: 'Double check you have entered all required information.' });\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <p className=\"mt-2\">\n        By suggesting a new example, you are helping in advancing learning materials for the Igbo language.\n      </p>\n      <p className=\"mt-2\">\n        {`If only Igbo is provided, then an English translation will be added later, \n        and the same will happen if an English sentence if sent.`}\n      </p>\n      <p className=\"mt-2 font-bold\">\n        {'Please provide an example, either in Igbo, or English, or both, that contains the associated word '}\n        <span className=\"font-bold underline\">{defaultValues?.word}</span>\n      </p>\n      <h2 className=\"form-header\">Igbo</h2>\n      <Controller\n        as={(\n          <input\n            className=\"form-input\"\n            placeholder={`Example in Igbo using ${defaultValues?.word}`}\n            data-test=\"igbo-input\"\n          />\n        )}\n        name=\"igbo\"\n        control={control}\n        defaultValue={defaultValues?.igbo || getValues().igbo}\n      />\n      {errors.igbo && (\n        <span className=\"error\">Either the Igbo or English sentence if required</span>\n      )}\n      <h2 className=\"form-header\">English</h2>\n      <Controller\n        as={(\n          <input\n            className=\"form-input\"\n            placeholder={`Example in English using ${defaultValues?.word}`}\n            data-test=\"english-input\"\n          />\n        )}\n        name=\"english\"\n        control={control}\n        defaultValue={defaultValues?.english || getValues().english}\n      />\n      <div className=\"flex flex-col items-start lg:items-end\">\n        <div className=\"flex flex-col w-full lg:flex-row-reverse lg:justify-start\">\n          <button type=\"submit\" className=\"button primary-button\">Submit</button>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              reset();\n              onRequestClose();\n            }}\n          >\n            Cancel\n          </button>\n        </div>\n        <p className=\"font-bold mt-3 text-center lg:text-right\">\n          {`By clicking 'Submit' your example suggestion will be sent \n          to our editors to be reviewed and later approved or denied.`}\n        </p>\n        <p className=\"font-bold mt-3 underline text-center lg:text-right\">\n          Before submitting, double check your edits.\n        </p>\n      </div>\n    </form>\n  );\n};\n\nAddExample.propTypes = {\n  onRequestClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func,\n  onFailure: PropTypes.func,\n  defaultValues: PropTypes.objectOf(['word']),\n};\n\nAddExample.defaultProps = {\n  onSuccess: () => {},\n  onFailure: () => {},\n  defaultValues: {},\n};\n\nexport default AddExample;\n","import { useRef, useEffect } from 'react';\n\nconst useEventListener = (eventName, handler, element = window) => {\n  const savedHandler = useRef();\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    const isSupported = element && element.addEventListener;\n    if (isSupported) {\n      const eventListener = (event) => savedHandler.current(event);\n      element.addEventListener(eventName, eventListener);\n      return (() => {\n        element.removeEventListener(eventName, eventListener);\n      });\n    }\n    return null;\n  }, [eventName, element]);\n};\n\nexport default useEventListener;\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { map } from 'lodash';\nimport useEventListener from '../hooks/useEventListener';\nimport ChevronIcon from '../assets/icons/downchevron.svg';\n\nconst Select = ({ ContainerComponent, options, className }) => {\n  const [isMenuVisible, setIsMenuVisible] = useState(false);\n  const selectRef = useRef();\n\n  const clickEventHandler = (e) => {\n    if (!selectRef.current.contains(e.target)) {\n      setIsMenuVisible(false);\n    }\n  };\n\n  useEventListener('click', clickEventHandler, document.getElementsByTagName('html')[0]);\n  return (\n    <div ref={selectRef} className={className}>\n      <button\n        className={`transition-all duration-200 border-2 border-solid border-green-500\n        bg-white hover:bg-green-100 rounded-lg w-full h-full`}\n        type=\"button\"\n        onClick={() => setIsMenuVisible(!isMenuVisible)}\n        data-test=\"select-actions\"\n      >\n        <div className=\"flex space-x-2 justify-center items-center\">\n          <ContainerComponent />\n          <ChevronIcon />\n        </div>\n      </button>\n      {isMenuVisible ? (\n        <div className=\"border border-solid border-gray-400 bg-white absolute w-48 rounded-lg py-1 mt-2 shadow-md\">\n          {map(options, ({ label, onSelect }) => (\n            <button\n              type=\"button\"\n              onClick={() => {\n                setIsMenuVisible(false);\n                onSelect();\n              }}\n              className=\"relative pl-4 py-2 hover:bg-gray-200 w-full cursor-pointer text-left\"\n            >\n              {label}\n            </button>\n          ))}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nSelect.propTypes = {\n  ContainerComponent: PropTypes.node.isRequired,\n  options: PropTypes.arrayOf(PropTypes.objectOf(['value', 'label', 'onSelect'])).isRequired,\n  className: PropTypes.string,\n};\n\nSelect.defaultProps = {\n  className: '',\n};\n\nexport default Select;\n","import React, { useState, useEffect } from 'react';\nimport { map } from 'lodash';\nimport getWord from '../API';\nimport Navbar from '../components/Navbar';\nimport NoWord from '../components/NoWord';\nimport Modal from '../components/Modal';\nimport Select from '../components/Select';\nimport SearchBar from '../components/SearchBar';\nimport AddWord from '../forms/AddWord';\nimport AddExample from '../forms/AddExample';\nimport parseQueries from '../utils/parseQueries';\n\nconst word = ({ location }) => {\n  const queries = location?.search ? parseQueries(location.search) : {};\n  const [response, setResponse] = useState(null);\n  const [renderNoWord, setRenderNoWord] = useState(false);\n  const [visible, setVisible] = useState(false);\n  const [formType, setFormType] = useState();\n  const [defaultValues, setDefaultValues] = useState({});\n\n  const showModal = () => {\n    setVisible(true);\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n  };\n\n  const options = [\n    {\n      value: 'editWord',\n      label: '📝 Suggest an Edit',\n      onSelect: () => {\n        setDefaultValues(response);\n        setFormType('word');\n        setVisible(true);\n      },\n    },\n    {\n      value: 'createExample',\n      label: '📚 Create an Example',\n      onSelect: () => {\n        setDefaultValues(response);\n        setFormType('example');\n        setVisible(true);\n      },\n    },\n  ];\n\n  useEffect(() => {\n    (async () => {\n      const words = (await getWord(queries.word)).data;\n      if (words.length) {\n        setResponse(words[0]);\n      } else {\n        setRenderNoWord(true);\n        setResponse({ word: queries.word });\n      }\n    })();\n  }, []);\n  return response?.word ? (\n    <div className=\"page-container\">\n      <Navbar />\n      <SearchBar />\n      {renderNoWord ? (\n        <NoWord\n          word={queries.word}\n          showAddWordModal={showModal}\n          setDefaultValues={(value) => setDefaultValues(value)}\n        />\n      ) : (\n        <div className=\"responsive-container px-2 lg:px-5\">\n          <div className=\"flex flex-col lg:flex-row justify-between mt-2 lg:mt-6\">\n            <div>\n              <h1 className=\"text-4xl text-gray-800 mt-3 lg:mt-1\">Word</h1>\n              <h2 className=\"text-2xl text-gray-800 mt-3 lg:mt-1\">{response?.word}</h2>\n              <h1 className=\"text-4xl text-gray-800 mt-3 lg:mt-1\">Part of Speech</h1>\n              <h2 className=\"text-2xl text-gray-800 mt-3 lg:mt-1\">{response?.wordClass}</h2>\n            </div>\n            <div>\n              <h1 className=\"text-4xl text-gray-800 mt-3 lg:mt-1\">Definitions</h1>\n              {response.definitions.length ? map(response.definitions, (definition, index) => (\n                <h2 className=\"text-xl text-gray-800\">\n                  <span className=\"text-gray-600 mr-2\">\n                    {`${index + 1}.`}\n                  </span>\n                  {definition}\n                </h2>\n              )) : null}\n            </div>\n          </div>\n          {process.env.NODE_ENV !== 'production' ? (\n            <div className=\"flex w-full justify-start lg:justify-end\">\n              {/* TODO: Abstract this select + modal logic into it's own component */}\n              <Select\n                className=\"w-32 h-8 mt-5\"\n                ContainerComponent={() => (\n                  <div className=\"flex space-x-2 justify-center items-center\">\n                    <div>\n                      <span role=\"img\" aria-label=\"Hand writing with pen\">✍🏾</span>\n                      {' Actions'}\n                    </div>\n                  </div>\n                )}\n                options={options}\n              />\n            </div>\n          ) : null}\n          <div className=\"h-px bg-gray-300 w-full my-6\" />\n          <h1 className=\"text-4xl text-gray-800\">Examples</h1>\n          {response.examples.length ? map((response.examples), ({ igbo, english }) => (\n            <div className=\"my-5\">\n              <h2 className=\"text-xl font-bold text-gray-800\">{igbo}</h2>\n              <h2 className=\"text-xl text-gray-600\">{english}</h2>\n            </div>\n          )) : 'No examples'}\n        </div>\n      )}\n      <Modal\n        title={formType === 'word' ? 'Suggest a Word Edit' : formType === 'example' ? 'Create a New Example' : null}\n        isOpen={visible}\n        onRequestClose={handleCancel}\n        className=\"modal-container\"\n      >\n        {formType === 'word' ? (\n          <AddWord defaultValues={defaultValues} />\n        ) : formType === 'example' ? (\n          <AddExample defaultValues={defaultValues} />\n        ) : null}\n      </Modal>\n    </div>\n  ) : null;\n};\n\nexport default word;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NoWord = ({ word, showAddWordModal, setDefaultValues }) => (\n  <div className=\"flex flex-col text-center items-center space-y-5 py-5\">\n    <h1 className=\"text-2xl text-gray-800 font-bold\">{`Sorry, we don't have ${word}`}</h1>\n    {process.env.NODE_ENV !== 'production' ? (\n      <>\n        <h2 className=\"text-xl text-gray-800\">Think this word should be included?</h2>\n        <h2 className=\"text-xl text-gray-800\">Define it!</h2>\n        <button\n          type=\"button\"\n          data-test=\"define-word-button\"\n          className=\"transition-all duration-200 bg-green-700 hover:bg-green-600 text-white px-10 py-3 rounded-md\"\n          onClick={() => {\n            setDefaultValues({ word });\n            showAddWordModal();\n          }}\n        >\n          {`Define ${word}`}\n        </button>\n      </>\n    ) : null}\n  </div>\n);\n\nNoWord.propTypes = {\n  word: PropTypes.string.isRequired,\n  showAddWordModal: PropTypes.func,\n  setDefaultValues: PropTypes.func,\n};\n\nNoWord.defaultProps = {\n  showAddWordModal: () => {},\n  setDefaultValues: () => {},\n};\n\nexport default NoWord;\n"],"sourceRoot":""}